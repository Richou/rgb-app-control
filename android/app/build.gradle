def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

apply plugin: 'com.android.application'
apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"

android {
    compileSdkVersion 27

    lintOptions {
        disable 'InvalidPackage'
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.heanoria.rgbcontrolapp.droid"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 1
        versionName "1.0.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    signingConfigs {
        release
        debug
    }

    Properties localProps = new Properties()
    String signingsRootPath = ""
    localProps.load(project.rootProject.file('local.properties').newDataInputStream())
    if (localProps != null && localProps.containsKey('signings.root.path')) {
        signingsRootPath = localProps['signings.root.path']
    }

    Properties signingProps = new Properties()
    def signingsPropFile = file(new File(signingsRootPath + '/signings.properties'))
    if (signingsPropFile.canRead()) {
        signingProps.load(new FileInputStream(signingsPropFile))
        if (signingProps != null &&
                signingProps.containsKey('RELEASE_STORE_FILE') &&
                signingProps.containsKey('RELEASE_STORE_PASSWORD') &&
                signingProps.containsKey('RELEASE_KEY_ALIAS') &&
                signingProps.containsKey('RELEASE_KEY_PASSWORD')) {
            android.signingConfigs.release.storeFile = file(signingProps.getProperty('RELEASE_STORE_FILE').replace('${path}', signingsRootPath))
            android.signingConfigs.release.storePassword = signingProps['RELEASE_STORE_PASSWORD']
            android.signingConfigs.release.keyAlias = signingProps['RELEASE_KEY_ALIAS']
            android.signingConfigs.release.keyPassword = signingProps['RELEASE_KEY_PASSWORD']
        } else {
            println 'signings.properties found but some entries are missing'
            android.buildTypes.release.signingConfig = null
        }

        if (signingProps != null &&
                signingProps.containsKey('DEBUG_STORE_FILE') &&
                signingProps.containsKey('DEBUG_STORE_PASSWORD') &&
                signingProps.containsKey('DEBUG_KEY_ALIAS') &&
                signingProps.containsKey('DEBUG_KEY_PASSWORD')) {
            android.signingConfigs.debug.storeFile = file(signingProps.getProperty('DEBUG_STORE_FILE').replace('${path}', signingsRootPath))
            android.signingConfigs.debug.storePassword = signingProps['DEBUG_STORE_PASSWORD']
            android.signingConfigs.debug.keyAlias = signingProps['DEBUG_KEY_ALIAS']
            android.signingConfigs.debug.keyPassword = signingProps['DEBUG_KEY_PASSWORD']
        } else {
            println 'signings.properties found but some entries are missing'
            android.buildTypes.debug.signingConfig = null
        }
    } else {
        println 'signings.properties not found'
        android.buildTypes.release.signingConfig = null
        android.buildTypes.debug.signingConfig = null
    }


    buildTypes {
        debug{
            signingConfig signingConfigs.debug
        }
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.release
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
